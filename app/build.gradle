apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyyMMdd")
}

def hostName() {
    return System.getProperty("user.name")
}

Map<String, String> propertices = project.getProperties();
String environment = "product";

def copyUrlConfig(path) {
    copy {
        from('config/' + path) {
            include('**/*')
        }
        into('src/main/assets/config')
    }
}

if (propertices.containsKey("environment")) {
    environment = propertices.get("environment");
    if (!environment.equals("product") && !environment.equals("preproduct")) {
        throw new Exception("环境切换错误，请检查！");
    }
} else {
    environment = "product";
}
copyUrlConfig(environment);
println("---项目 environment: " + environment + "----")


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.shuiyouwen.fragme"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    if (propertices.containsKey("environment")) {
                        environment = propertices.get("environment");
                    } else {
                        environment = "product";
                    }

                    def fileName = "app_V${defaultConfig.versionName}_${releaseTime()}_${hostName()}_${environment}_${variant.buildType.name}.apk"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }
}

//解决导入rxlifecycle产生的bug
configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    testCompile 'junit:junit:4.12'

    compile 'com.jakewharton:butterknife:8.4.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'
    compile 'com.hwangjr.rxbus:rxbus:1.0.5'

    compile project(':common_lib')
}
